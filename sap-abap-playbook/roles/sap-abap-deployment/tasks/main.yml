---

- name: Get the master password from the SSM 
  set_fact: 
    master_password: "{{ lookup('aws_ssm', master_password_ssm_key) }}"

- name: Set Logistics Tools path 
  set_fact: 
    sltools_path: /sapmnt/sltools
  when: sltools_path is undefined

- name: Set Install Target details
  set_fact:
    sap_target: "{{ sap_install_control[sap_install_target] }}"

- name: Setup Installation environment
  block:
    - name: Create the software folder to download the SAP software
      file:
        path: /sapmnt/sltools/software
        state: directory

    - name: Create the SWPM folder to download the SAP software
      file:
        path: /sapmnt/sltools/SWPM
        state: directory

    - name: Get list of files from S3
      aws_s3:
        mode: list
        bucket: "{{ sap_software_bucket }}"
        prefix: "{{ sap_software_bucket_path }}"
        marker: "{{ sap_software_bucket_path }}"
        profile: shared-s3
      register: s3_bucket_items

    - name: Download files from S3
      aws_s3:
        mode: get
        bucket: "{{ sap_software_bucket }}"
        object: "{{ item }}"
        overwrite: different
        dest: "/sapmnt/sltools/software/{{ item|basename }}"
        profile: shared-s3
      with_items: "{{ s3_bucket_items.s3_keys }}"

    - name: Find SAPCAR file 
      ansible.builtin.find:
        paths: /sapmnt/sltools/software
        patterns: 'SAPCAR*,sapcar*'
      register: sapcar_source
    
    - name: Copy SAPCAR to /usr/local/bin and set it executable
      copy: 
        src: "{{ sapcar_source.files[0].path }}" 
        dest: /usr/local/bin/sapcar
        mode: '0744'
        remote_src: yes
      when: sapcar_source.files

    - name: Expand Export Archives
      include_tasks: expand-export-archives.yml
      loop: "{{ sap_target.export_dvd }}"
      when: sap_target.export_dvd is defined and sap_target.export_dvd

    - name: Find SWPM in the sltools software folder
      ansible.builtin.find:
        paths: /sapmnt/sltools/software
        patterns: '^(?:SWPM|swpm).*(?:SAR|sar)$'
        use_regex: yes
      register: swpm_source

    - name: expand SWPM sar file to the sltools/SWPM folder
      command: /usr/local/bin/sapcar -xvf "{{ swpm_source.files[0].path }}"
      args:
        chdir: /sapmnt/sltools/SWPM
      when: swpm_source.files
      register: swpm_expand

## Preapare for the Install 
- name: Prepare for the Install
  block: 
  
  - name: Create the sapinst group 
    group:
      name: sapinst
      state: present
      gid: 1000
  
  - name: Add root to the sapinst group 
    user:
      name: root
      groups: sapinst
      append: yes 

  - name: Create the software folder to download the SAP software
    file:
      path: "{{ sltools_path }}/sap_install"
      state: directory
      owner: root
      group: sapinst
      mode: '0775'

  - name: Copy Silent installtion temlate file
    copy:
      src: "{{ role_path }}/files/{{ sap_target.control_file }}"
      dest: "{{ sltools_path }}/sap_install"
      owner: root
      group: root
      mode: 0644
    register: parameter_file

  - name: Set the installation paramter file fact
    set_fact: 
      sap_parameter_file: "{{ parameter_file.dest }}"

  # - name: Check if SAP is installed
  #   stat: 
  #     path: /usr/sap/sapservices
  #   register: sap_services

  # - name: Check /usr/sap/sapservices for SAP SID 
  #   shell: "grep -i '{{ sid }}' /usr/sap/sapservices"
  #   register: sap_sid_present
  #   when: sap_services.stat.exists

  - name: Set template facts for the SAP Install Template  
    include_tasks: abap-install.yml
    # when: sap_sid_present is not changed and sap_services.stat.exists
    # when: not sap_services.stat.exists 

  # - name: Check /usr/sap/sapservices for DAA Agent 
  #   shell: "grep -i 'SMDA' /usr/sap/sapservices"
  #   register: sap_daa_present
  #   when: sap_services.stat.exists

  - name: Set template facts for the SAP Install Template  
    include_tasks: daa-install.yml
    # when: sap_daa_present is not changed and sap_services.stat.exists

  - name: Run the migration prepare steps
    include_tasks: migration-prep.yml

  - name: Run the migration prepare steps
    include_tasks: cleanup.yml

...